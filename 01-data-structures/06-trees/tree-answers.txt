1.
Tree:
The Matrix: 87
Braveheart: 78
Mad Max 2: The Road Warrior: 98
Pacific Rim: 72
Inception: 86
District 9: 90
Star Wars: Return of the Jedi: 80
The Shawshank Redemption: 91
The Martian: 92
Star Wars: The Empire Strikes Back: 94
Star Wars: A New Hope: 93

Heap:
Pacific Rim: 72
Braveheart: 78
Star Wars: Return of the Jedi: 80
The Matrix: 87
District 9: 90
Star Wars: The Empire Strikes Back: 94
Inception: 86
Star Wars: A New Hope: 93
The Shawshank Redemption: 91
The Martian: 92
Mad Max 2: The Road Warrior: 98

2.
***Create binary tree and binary heap of 10,000 length***
       user     system      total        real
Binary Search Tree  3.560000   0.010000   3.570000 (  3.574420)
Binary Heap         2.860000   0.010000   2.870000 (  2.863736)
***Finds 5,000th element***
       user     system      total        real
Binary Search Tree  0.000000   0.000000   0.000000 (  0.000157)
Binary Heap         0.000000   0.000000   0.000000 (  0.000175)
***Deletion***
       user     system      total        real
Binary Search Tree  0.000000   0.000000   0.000000 (  0.000007)
Binary Heap         0.000000   0.000000   0.000000 (  0.000008)

How much time does an average insertion consume in the Binary Search Tree compared to the Heap?
It is similar. The heap is slightly quicker.

How much time does finding 50000 in the Binary Search Tree consume compared to the Heap?
The time is nearly identical.

How much time does the average deletion consume in a Binary Search Tree compared to the Heap?
It takes nearly the same amount of time.

When would you use a Binary Search Tree and why?
I would use a binary search tree is the order and sequence is not important. It was slightly faster to find and delete nodes.

When would you use an Heap and why?
It would make more sense to use a heap if there is a benefit to a somewhat ordered arrangement of nodes. 
